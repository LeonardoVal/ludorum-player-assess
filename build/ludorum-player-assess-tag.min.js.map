{"version":3,"sources":["../src/__prologue__.js","../src/hypothesis-testing.js","../src/__epilogue__.js"],"names":["__init__","base","Sermat","ludorum","raiseIf","exports","__package__","__name__","__dependencies__","__SERMAT__","include","statistics","compare","args","game","intervalId","players","RandomPlayer","name","opponents","matchCount","logger","contests","map","player","tournaments","Measurement","info","length","matchesPlayed","forEach","contest","events","on","setInterval","logTime","Future","all","run","then","i","stats","r","iterable","role","count","key","toObject","clearInterval","hypergeometricRule","row1","row2","n","rowSums","colSums","v","factors","Array","concat","x","fi","di","Math","pow","fisher2x2","alpha","isNaN","a","b","c","d","r1","r2","c1","cutoff","abs","max_a","min","p_value","comparison","fisher2x3","p","max_b","e","f","c2","c3","row"],"mappings":"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","file":"ludorum-player-assess-tag.min.js","sourcesContent":["/** Library wrapper and layout.\n*/\nfunction __init__(base, Sermat, ludorum) { \"use strict\";\n// Import synonyms. ////////////////////////////////////////////////////////////////////////////////\n\tvar raiseIf = base.raiseIf;\n\n// Library layout. /////////////////////////////////////////////////////////////////////////////////\n\tvar exports = {\n\t\t\t__package__: 'ludorum-player-assess',\n\t\t\t__name__: 'ludorum_player_assess',\n\t\t\t__init__: __init__,\n\t\t\t__dependencies__: [base, Sermat], ludorum,\n\t\t\t__SERMAT__: { include: [base, ludorum] }\n\t\t},\n\t\t/* Namespace for statistical functions and utilities */\n\t\tstatistics = exports.statistics = { }\n\t;","/** # Independence test\n\nPlayer performance comparisons and tests based on hypothesis testing.\n*/\n\nexports.compare = function compare(args) {\n\traiseIf(!args || !args.game, \"Missing `game` argument!\");\n\tvar game = args.game,\n\t\tplayers = args.players || [new ludorum.players.RandomPlayer({ name: 'RandomPlayer' })],\n\t\topponents = args.opponents || [new ludorum.players.RandomPlayer({ name: 'RandomOpponent' })],\n\t\tmatchCount = +args.matchCount || 400,\n\t\tlogger = args.logger,\n\t\tcontests = players.map(function (player) {\n\t\t\treturn new ludorum.tournaments.Measurement(game, player, opponents, matchCount);\n\t\t}),\n\t\tintervalId;\n\tif (logger) {\n\t\tlogger.info(\"Starting \"+ matchCount * players.length * 2 +\" matches of \"+ game.name +\".\");\n\t\tvar matchesPlayed = 0;\n\t\tcontests.forEach(function (contest) { \n\t\t\tcontest.events.on('afterMatch', function () {\n\t\t\t\tmatchesPlayed++;\n\t\t\t});\n\t\t});\n\t\tintervalId = setInterval(function () {\n\t\t\tlogger.info(\"Played \"+ matchesPlayed +\"/\"+ matchCount * players.length * 2 +\" matches.\");\n\t\t}, args.logTime || 20000);\n\t}\n\treturn base.Future.all(contests.map(function (contest) {\n\t\treturn contest.run();\n\t})).then(function () {\n\t\treturn contests.map(function (contest, i) {\n\t\t\tvar stats = contest.statistics,\n\t\t\t\tplayer = players[i],\n\t\t\t\tr = base.iterable(game.players).map(function (role) {\n\t\t\t\t\treturn [role, [\n\t\t\t\t\t\tstats.count({ key: 'victories', role: role, player: player.name }),\n\t\t\t\t\t\tstats.count({ key: 'draws',     role: role, player: player.name }),\n\t\t\t\t\t\tstats.count({ key: 'defeats',   role: role, player: player.name })\n\t\t\t\t\t]];\n\t\t\t\t}).toObject();\n\t\t\tr.player = player.name;\n\t\t\treturn r;\n\t\t});\n\t}).then(function (r) {\n\t\tif (logger) {\n\t\t\tclearInterval(intervalId);\n\t\t\tlogger.info(\"Played \"+ matchesPlayed +\"/\"+ matchCount * players.length * 2 +\" matches.\");\n\t\t}\n\t\treturn r;\n\t});\n};\n\n// ## Fisher exact test ############################################################################\n\n/** Part of Fisher's exact test is the hypergeometric rule, which is used to calculate the \nprobability of a given contingency table.\n\nThe formula is $ p=\\frac{(a+b)!(c+d)!(a+c)!(b+d)!}{a!b!c!d!n!} $. Calculating all factorials can \noverflow the 64 bits double floating point precision, and even if it does not is quite inefficient. \nThis algorithm lists all factors (and divisors), simplifying the calculation as much as possible, \nand ordering multiplications and divisions to minimize the chance of overflow.\n*/\nvar hypergeometricRule = statistics.hypergeometricRule = function hypergeometricRule(row1, row2) {\n    var n = 0,\n        rowSums = [0, 0],\n        colSums = row1.map(function (v, i) {\n            rowSums[0] += v;\n            rowSums[1] += row2[i];\n            n += v + row2[i];\n            return v + row2[i];\n        });\n    var factors = new Array(n + 1);\n    rowSums.concat(colSums).forEach(function (x) {\n        for (var i = 2; i <= x; i++) {\n            factors[i] = (factors[i] |0) + 1;\n        }\n    });\n    [n].concat(row1, row2).forEach(function (x) {\n        for (var i = 2; i <= x; i++) {\n            factors[i] = (factors[i] |0) - 1;\n        }\n    });\n    var r = 1;\n    for (var fi = 2, di = 2; fi <= n || di <= n; ) {\n        if (r <= 1 && fi <= n) {\n            if (factors[fi] > 0) {\n                r *= Math.pow(fi, factors[fi]);\n            }\n            fi++;\n        } else {\n            if (factors[di] < 0) {\n                r *= Math.pow(di, factors[di]);\n            }\n            di++;\n        }\n    }\n    return r;\n};\n\nstatistics.fisher2x2 = function fisher2x2(row1, row2, alpha) {\n    raiseIf(row1.length !== 2 || row2.length !== 2, \"Contingency table should be 2x2!\");\n    alpha = isNaN(alpha) ? 0.05 : +alpha;\n    var a = row1[0], b = row1[1],\n        c = row2[0], d = row2[1],\n        r1 = a + b, r2 = c + d,\n        c1 = a + c, c2 = b + d,\n\t   cutoff = Math.abs(a / r1 - c / r2),\n\t   max_a = Math.min(r1, c1),\n        p_value = 0,\n        disprop, p;\n    for (a = 0; a <= max_a; a++) {\n\t\tb = r1 - a;\n\t\tc = c1 - a;\n\t\td = r2 - c;\n\t\tif (d >= 0) {\n\t\t\tdisprop = Math.abs(a / r1 - c / r2);\n\t\t\tif (disprop >= cutoff) {\n\t\t\t\tp = hypergeometricRule([a, b], [c, d]);\n\t\t\t\tp_value += p;\n\t\t\t}\n\t\t}\n    }\n    return {\n        p_value: p_value,\n        comparison: p_value > alpha ? 0 : (row1[0] - row2[0])\n    };\n};\n\nstatistics.fisher2x3 = function fisher2x3(row1, row2, alpha) {\n\traiseIf(row1.length !== 3 || row2.length !== 3, \"Contingency table should be 2x3!\");\n\talpha = isNaN(alpha) ? 0.05 : +alpha;\n\tvar a = row1[0], b = row1[1], c = row1[2],\n\t\td = row2[0], e = row2[1], f = row2[2],\n\t\tr1 = a + b + c, r2 = d + e + f,\n\t\tc1 = a + d, c2 = b + e, c3 = c + f,\n\t\tcutoff = hypergeometricRule([a, b, c], [d, e, f]),\n\t\tmax_a = Math.min(r1, c1),\n\t\tp_value = 0,\n\t\tp, max_b;\n\tfor (a = 0; a <= max_a; a++) {\n\t\tmax_b = Math.min(r1 - a, c2);\n\t\tfor (b = 0; b <= max_b; b++) {\n\t\t\tc = r1 - a - b;\n\t\t\td = c1 - a;\n\t\t\te = c2 - b;\n\t\t\tf = c3 - c;\n\t\t\tif (f >= 0) {\n\t\t\t\tp = hypergeometricRule([a, b, c], [d, e, f]);\n\t\t\t\tif (p <= cutoff) {\n\t\t\t\t\tp_value += p;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\tp_value: p_value,\n\t\tcomparison: p_value > alpha ? 0 : (row1[0] - row2[0] || (row1[1] - row[1]) / (c2 + 1))\n\t};\n};","// See __prologue__.js\n\treturn exports;\n}\n"]}