{"version":3,"sources":["../src/__prologue__.js","../src/hypothesis-testing.js","../src/__epilogue__.js"],"names":["__init__","base","Sermat","ludorum","raiseIf","exports","__package__","__name__","__dependencies__","__SERMAT__","include","compare","game","player1","player2","opponents","matchCount","players","RandomPlayer","name","contest1","tournaments","Measurement","contest2","Future","all","run","then","result","forEach","role","stats1","statistics","stats2","count","key","player","hypergeometricRule","row1","row2","n","rowSums","colSums","map","v","i","factors","Array","concat","x","r","fi","di","Math","pow","fisher2x2","alpha","length","isNaN","a","b","c","d","r1","r2","c1","c2","cutoff","abs","max_a","min","p_value","comparison","fisher2x3","p","e","f","c3","row"],"mappings":"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","file":"ludorum-player-assess-tag.min.js","sourcesContent":["/** Library wrapper and layout.\n*/\nfunction __init__(base, Sermat, ludorum) { \"use strict\";\n// Import synonyms. ////////////////////////////////////////////////////////////////////////////////\n\tvar raiseIf = base.raiseIf;\n\n// Library layout. /////////////////////////////////////////////////////////////////////////////////\n\tvar exports = {\n\t\t\t__package__: 'ludorum-player-assess',\n\t\t\t__name__: 'ludorum_player_assess',\n\t\t\t__init__: __init__,\n\t\t\t__dependencies__: [base, Sermat], ludorum,\n\t\t\t__SERMAT__: { include: [base, ludorum] }\n\t\t}\n\t;","/** # Independence test\n\nPlayer performance comparisons and tests based on hypothesis testing.\n*/\nexports.compare = function compare(game, player1, player2, opponents, matchCount) {\n\tplayer2 = player2 || new ludorum.players.RandomPlayer({ name: 'RandomPlayer' });\n\topponents = opponents || [new ludorum.players.RandomPlayer({ name: 'RandomOpponent' })];\n\tmatchCount = +matchCount || 400;\n\tvar contest1 = new ludorum.tournaments.Measurement(game, player1, opponents, matchCount),\n\t\tcontest2 = new ludorum.tournaments.Measurement(game, player2, opponents, matchCount);\n\treturn base.Future.all([contest1.run(), contest2.run()]).then(function () {\n\t\tvar result = {};\n\t\tgame.players.forEach(function (role) {\n\t\t\tvar stats1 = contest1.statistics,\n\t\t\t\tstats2 = contest2.statistics;\n\t\t\t(result[player1.name] || (result[player1.name] = {}))[role] = [\n\t\t\t\tstats1.count({ key: 'victories', role: role, player: player1.name }),\n\t\t\t\tstats1.count({ key: 'draws', role: role, player: player1.name }),\n\t\t\t\tstats1.count({ key: 'defeats', role: role, player: player1.name })\n\t\t\t];\n\t\t\t(result[player2.name] || (result[player2.name] = {}))[role] = [\n\t\t\t\tstats2.count({ key: 'victories', role: role, player: player2.name }),\n\t\t\t\tstats2.count({ key: 'draws', role: role, player: player2.name }),\n\t\t\t\tstats2.count({ key: 'defeats', role: role, player: player2.name })\n\t\t\t];\n\t\t});\n\t\treturn result;\n\t});\n};\n\n// ## Fisher exact test ############################################################################\n\nvar hypergeometricRule = exports.hypergeometricRule = function hypergeometricRule(row1, row2) {\n    var n = 0,\n        rowSums = [0, 0],\n        colSums = row1.map(function (v, i) {\n            rowSums[0] += v;\n            rowSums[1] += row2[i];\n            n += v + row2[i];\n            return v + row2[i];\n        });\n    var factors = new Array(n + 1);\n    rowSums.concat(colSums).forEach(function (x) {\n        for (var i = 2; i <= x; i++) {\n            factors[i] = (factors[i] |0) + 1;\n        }\n    });\n    [n].concat(row1, row2).forEach(function (x) {\n        for (var i = 2; i <= x; i++) {\n            factors[i] = (factors[i] |0) - 1;\n        }\n    });\n    var r = 1;\n    for (var fi = 2, di = 2; fi <= n || di <= n; ) {\n        if (r <= 1 && fi <= n) {\n            if (factors[fi] > 0) {\n                r *= Math.pow(fi, factors[fi]);\n            }\n            fi++;\n        } else {\n            if (factors[di] < 0) {\n                r *= Math.pow(di, factors[di]);\n            }\n            di++;\n        }\n    }\n    return r;\n};\n\nexports.fisher2x2 = function fisher2x2(row1, row2, alpha) {\n    raiseIf(row1.length !== 2 || row2.length !== 2, \"Contingency table should be 2x2!\");\n    alpha = isNaN(alpha) ? 0.05 : +alpha;\n    var a = row1[0], b = row1[1],\n        c = row2[0], d = row2[1],\n        r1 = a + b, r2 = c + d,\n        c1 = a + c, c2 = b + d,\n        cutoff = Math.abs(a / r1 - c / r2),\n        max_a = Math.min(c1, r1),\n        p_value = 0,\n        disprop;\n    for (a = 0; a <= max_a; a++) {\n        b = r1 - a;\n        c = c1 - a;\n        d = c2 - b;\n        disprop = Math.abs(a / r1 - c / r2);\n        if (disprop >= cutoff) {\n            p_value += hypergeometricRule([a, b], [c, d]);\n        }\n    }\n    return {\n        p_value: p_value,\n        comparison: p_value > alpha ? 0 : (row1[0] - row2[0])\n    };\n};\n\nexports.fisher2x3 = function fisher2x3(row1, row2, alpha) {\n    raiseIf(row1.length !== 3 || row2.length !== 3, \"Contingency table should be 2x3!\");\n    alpha = isNaN(alpha) ? 0.05 : +alpha;\n    var a = row1[0], b = row1[1], c = row1[2],\n        d = row2[0], e = row2[1], f = row2[2],\n        r1 = a + b + c, r2 = d + e + f,\n        c1 = a + d, c2 = b + e, c3 = c + f,\n        cutoff = hypergeometricRule([a, b, c], [d, e, f]),\n        p_value = 0,\n        p;\n    for (a = 0; a <= r1; a++) {\n        for (b = 0; b <= r1 - a; b++) {\n            c = r1 - a - b;\n            d = c1 - a;\n            e = c2 - b;\n            f = c3 - c;\n            p = hypergeometricRule([a, b, c], [d, e, f]);\n            if (p <= cutoff) {\n                p_value += p;\n            }\n        }\n    }\n    return {\n        p_value: p_value,\n        comparison: p_value > alpha ? 0 : (row1[0] - row2[0] || (row1[1] - row[1]) / (c2 + 1))\n    };\n};","// See __prologue__.js\n\treturn exports;\n}\n"]}