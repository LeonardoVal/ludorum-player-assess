{"version":3,"sources":["../src/__prologue__.js","../src/hypothesis-testing.js","../src/__epilogue__.js"],"names":["__init__","base","Sermat","ludorum","exports","__package__","__name__","__dependencies__","__SERMAT__","include","compare","game","player1","player2","opponents","matchCount","players","RandomPlayer","name","contest1","tournaments","Measurement","contest2","Future","all","run","then","result","forEach","role","stats1","statistics","stats2","count","key","player","CHI_SQUARED_CRITICAL_VALUES","0.1","0.05","0.01","chiSquared1","results1","results2","options","won1","won2","lost1","lost2","chiSq","Math","pow","significance","chiSquared","comparison","criticalValue","effect","sqrt","hypergeometricRule","a","b","c","d","n","factors","Array","x","i","r","fi","di","fisherTest","p","isNaN","NaN"],"mappings":"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","file":"ludorum-player-assess.min.js","sourcesContent":["/** Library wrapper and layout.\n*/\nfunction __init__(base, Sermat, ludorum) { \"use strict\";\n// Import synonyms. ////////////////////////////////////////////////////////////////////////////////\n\n// Library layout. /////////////////////////////////////////////////////////////////////////////////\n\tvar exports = {\n\t\t\t__package__: 'ludorum-player-assess',\n\t\t\t__name__: 'ludorum_player_assess',\n\t\t\t__init__: __init__,\n\t\t\t__dependencies__: [base, Sermat], ludorum,\n\t\t\t__SERMAT__: { include: [base, ludorum] }\n\t\t}\n\t;","/** # Independence test\n\nPlayer performance comparisons and tests based on hypothesis testing.\n*/\nexports.compare = function compare(game, player1, player2, opponents, matchCount) {\n\tplayer2 = player2 || new ludorum.players.RandomPlayer({ name: 'RandomPlayer' });\n\topponents = opponents || [new ludorum.players.RandomPlayer({ name: 'RandomOpponent' })];\n\tmatchCount = +matchCount || 400;\n\tvar contest1 = new ludorum.tournaments.Measurement(game, player1, opponents, matchCount),\n\t\tcontest2 = new ludorum.tournaments.Measurement(game, player2, opponents, matchCount);\n\treturn base.Future.all([contest1.run(), contest2.run()]).then(function () {\n\t\tvar result = {};\n\t\tgame.players.forEach(function (role) {\n\t\t\tvar stats1 = contest1.statistics,\n\t\t\t\tstats2 = contest2.statistics;\n\t\t\t(result[player1.name] || (result[player1.name] = {}))[role] = [\n\t\t\t\tstats1.count({ key: 'victories', role: role, player: player1.name }),\n\t\t\t\tstats1.count({ key: 'draws', role: role, player: player1.name }),\n\t\t\t\tstats1.count({ key: 'defeats', role: role, player: player1.name })\n\t\t\t];\n\t\t\t(result[player2.name] || (result[player2.name] = {}))[role] = [\n\t\t\t\tstats2.count({ key: 'victories', role: role, player: player2.name }),\n\t\t\t\tstats2.count({ key: 'draws', role: role, player: player2.name }),\n\t\t\t\tstats2.count({ key: 'defeats', role: role, player: player2.name })\n\t\t\t];\n\t\t});\n\t\treturn result;\n\t});\n};\n\n// ## Chi squared test #############################################################################\n\nvar CHI_SQUARED_CRITICAL_VALUES = {\n\t'0.1': 2.706,\n\t'0.05': 3.841,\n\t'0.01': 6.635\n};\n\n/** The function `chiSquared1` performs a chi squared independence test. The arguments `result1` and\n`result2` must be arrays with three numbers in this order: amount of matches won, tied and lost. \n*/\nexports.chiSquared1 = function chiSquared1(results1, results2, options) {\n\tvar won1 = results1[0], \n\t\twon2 = results2[0],\n\t\tlost1 = results1[2], \n\t\tlost2 = results2[2],\n\t\tchiSq = Math.pow(won1 * lost2 - won2 * lost1, 2) * (won1 + won2 + lost1 + lost2) /\n\t\t\t(won1 + lost1) / (won2 + lost2) / (lost1 + lost2) / (won1 + won2),\n\t\tsignificance = options && options.significance || 0.05,\n\t\tcriticalValue = options && options.criticalValue || \n\t\t\tCHI_SQUARED_CRITICAL_VALUES[''+ significance];\n\treturn {\n\t\tchiSquared: chiSq,\n\t\tcomparison: (chiSq < criticalValue) ? 0 : won1 - won2,\n\t\teffect: Math.sqrt(chiSquared / (won1 + won2 + lost1 + lost2))\n\t};\n};\n\n// ## Fisher exact test ############################################################################\n\nvar hypergeometricRule = exports.hypergeometricRule = function hypergeometricRule(a, b, c, d) {\n\tvar n = a + b + c + d,\n\t\tfactors = new Array(n + 1);\n\t[a + b, c + d, a + c, b + d].forEach(function (x) {\n\t\tfor (var i = 2; i <= x; i++) {\n\t\t\tfactors[i] = (factors[i] |0) + 1;\n\t\t}\n\t});\n\t[a, b, c, d, n].forEach(function (x) {\n\t\tfor (var i = 2; i <= x; i++) {\n\t\t\tfactors[i] = (factors[i] |0) - 1;\n\t\t}\n\t});\n\tvar r = 1;\n\tfor (var fi = 2, di = 2; fi <= n || di <= n; ) {\n\t\tif (r <= 1 && fi <= n) {\n\t\t\tif (factors[fi] > 0) {\n\t\t\t\tr *= Math.pow(fi, factors[fi]);\n\t\t\t}\n\t\t\tfi++;\n\t\t} else {\n\t\t\tif (factors[di] < 0) {\n\t\t\t\tr *= Math.pow(di, factors[di]);\n\t\t\t}\n\t\t\tdi++;\n\t\t}\n\t}\n\treturn r;\n};\n\nexports.fisherTest = function fisherTest(results1, results2, options) { //FIXME\n\tvar significance = options && options.significance || 0.05,\n\t\tp = hypergeometricRule(results1[0], results1[2], results2[0], results2[2]);\n\treturn {\n\t\tp: p,\n\t\tcomparison: isNaN(p) ? NaN : (p > significance) ? 0 : results1[0] - results2[0]\n\t};\n};","// See __prologue__.js\n\treturn exports;\n}\n"]}