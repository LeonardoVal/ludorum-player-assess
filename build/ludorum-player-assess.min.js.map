{"version":3,"sources":["../src/__prologue__.js","../src/hypothesis-testing.js","../src/__epilogue__.js"],"names":["__init__","base","Sermat","ludorum","raiseIf","exports","__package__","__name__","__dependencies__","__SERMAT__","include","compare","args","game","intervalId","players","RandomPlayer","name","opponents","matchCount","logger","contests","map","player","tournaments","Measurement","info","length","matchesPlayed","forEach","contest","events","on","setInterval","logTime","Future","all","run","then","i","stats","statistics","r","iterable","role","count","key","toObject","clearInterval","hypergeometricRule","row1","row2","n","rowSums","colSums","v","factors","Array","concat","x","fi","di","Math","pow","fisher2x2","alpha","isNaN","a","b","c","d","r1","r2","c1","c2","cutoff","abs","max_a","min","p_value","comparison","fisher2x3","p","e","f","c3","row"],"mappings":"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","file":"ludorum-player-assess.min.js","sourcesContent":["/** Library wrapper and layout.\n*/\nfunction __init__(base, Sermat, ludorum) { \"use strict\";\n// Import synonyms. ////////////////////////////////////////////////////////////////////////////////\n\tvar raiseIf = base.raiseIf;\n\n// Library layout. /////////////////////////////////////////////////////////////////////////////////\n\tvar exports = {\n\t\t\t__package__: 'ludorum-player-assess',\n\t\t\t__name__: 'ludorum_player_assess',\n\t\t\t__init__: __init__,\n\t\t\t__dependencies__: [base, Sermat], ludorum,\n\t\t\t__SERMAT__: { include: [base, ludorum] }\n\t\t}\n\t;","/** # Independence test\n\nPlayer performance comparisons and tests based on hypothesis testing.\n*/\n\nexports.compare = function compare(args) {\n\traiseIf(!args || !args.game, \"Missing `game` argument!\");\n\tvar game = args.game,\n\t\tplayers = args.players || [new ludorum.players.RandomPlayer({ name: 'RandomPlayer' })],\n\t\topponents = args.opponents || [new ludorum.players.RandomPlayer({ name: 'RandomOpponent' })],\n\t\tmatchCount = +args.matchCount || 400,\n\t\tlogger = args.logger,\n\t\tcontests = players.map(function (player) {\n\t\t\treturn new ludorum.tournaments.Measurement(game, player, opponents, matchCount);\n\t\t}),\n\t\tintervalId;\n\tif (logger) {\n\t\tlogger.info(\"Starting \"+ matchCount * players.length * 2 +\" matches of \"+ game.name +\".\");\n\t\tvar matchesPlayed = 0;\n\t\tcontests.forEach(function (contest) { \n\t\t\tcontest.events.on('afterMatch', function () {\n\t\t\t\tmatchesPlayed++;\n\t\t\t});\n\t\t});\n\t\tintervalId = setInterval(function () {\n\t\t\tlogger.info(\"Played \"+ matchesPlayed +\"/\"+ matchCount * players.length * 2 +\" matches.\");\n\t\t}, args.logTime || 20000);\n\t}\n\treturn base.Future.all(contests.map(function (contest) {\n\t\treturn contest.run();\n\t})).then(function () {\n\t\treturn contests.map(function (contest, i) {\n\t\t\tvar stats = contest.statistics,\n\t\t\t\tplayer = players[i],\n\t\t\t\tr = base.iterable(game.players).map(function (role) {\n\t\t\t\t\treturn [role, [\n\t\t\t\t\t\tstats.count({ key: 'victories', role: role, player: player.name }),\n\t\t\t\t\t\tstats.count({ key: 'draws',     role: role, player: player.name }),\n\t\t\t\t\t\tstats.count({ key: 'defeats',   role: role, player: player.name })\n\t\t\t\t\t]];\n\t\t\t\t}).toObject();\n\t\t\tr.player = player.name;\n\t\t\treturn r;\n\t\t});\n\t}).then(function (r) {\n\t\tif (logger) {\n\t\t\tclearInterval(intervalId);\n\t\t\tlogger.info(\"Played \"+ matchesPlayed +\"/\"+ matchCount * players.length * 2 +\" matches.\");\n\t\t}\n\t\treturn r;\n\t});\n};\n\n// ## Fisher exact test ############################################################################\n\nvar hypergeometricRule = exports.hypergeometricRule = function hypergeometricRule(row1, row2) {\n    var n = 0,\n        rowSums = [0, 0],\n        colSums = row1.map(function (v, i) {\n            rowSums[0] += v;\n            rowSums[1] += row2[i];\n            n += v + row2[i];\n            return v + row2[i];\n        });\n    var factors = new Array(n + 1);\n    rowSums.concat(colSums).forEach(function (x) {\n        for (var i = 2; i <= x; i++) {\n            factors[i] = (factors[i] |0) + 1;\n        }\n    });\n    [n].concat(row1, row2).forEach(function (x) {\n        for (var i = 2; i <= x; i++) {\n            factors[i] = (factors[i] |0) - 1;\n        }\n    });\n    var r = 1;\n    for (var fi = 2, di = 2; fi <= n || di <= n; ) {\n        if (r <= 1 && fi <= n) {\n            if (factors[fi] > 0) {\n                r *= Math.pow(fi, factors[fi]);\n            }\n            fi++;\n        } else {\n            if (factors[di] < 0) {\n                r *= Math.pow(di, factors[di]);\n            }\n            di++;\n        }\n    }\n    return r;\n};\n\nexports.fisher2x2 = function fisher2x2(row1, row2, alpha) {\n    raiseIf(row1.length !== 2 || row2.length !== 2, \"Contingency table should be 2x2!\");\n    alpha = isNaN(alpha) ? 0.05 : +alpha;\n    var a = row1[0], b = row1[1],\n        c = row2[0], d = row2[1],\n        r1 = a + b, r2 = c + d,\n        c1 = a + c, c2 = b + d,\n        cutoff = Math.abs(a / r1 - c / r2),\n        max_a = Math.min(c1, r1),\n        p_value = 0,\n        disprop;\n    for (a = 0; a <= max_a; a++) {\n        b = r1 - a;\n        c = c1 - a;\n        d = c2 - b;\n        disprop = Math.abs(a / r1 - c / r2);\n        if (disprop >= cutoff) {\n            p_value += hypergeometricRule([a, b], [c, d]);\n        }\n    }\n    return {\n        p_value: p_value,\n        comparison: p_value > alpha ? 0 : (row1[0] - row2[0])\n    };\n};\n\nexports.fisher2x3 = function fisher2x3(row1, row2, alpha) {\n    raiseIf(row1.length !== 3 || row2.length !== 3, \"Contingency table should be 2x3!\");\n    alpha = isNaN(alpha) ? 0.05 : +alpha;\n    var a = row1[0], b = row1[1], c = row1[2],\n        d = row2[0], e = row2[1], f = row2[2],\n        r1 = a + b + c, r2 = d + e + f,\n        c1 = a + d, c2 = b + e, c3 = c + f,\n        cutoff = hypergeometricRule([a, b, c], [d, e, f]),\n        p_value = 0,\n        p;\n    for (a = 0; a <= r1; a++) {\n        for (b = 0; b <= r1 - a; b++) {\n            c = r1 - a - b;\n            d = c1 - a;\n            e = c2 - b;\n            f = c3 - c;\n            p = hypergeometricRule([a, b, c], [d, e, f]);\n            if (p <= cutoff) {\n                p_value += p;\n            }\n        }\n    }\n    return {\n        p_value: p_value,\n        comparison: p_value > alpha ? 0 : (row1[0] - row2[0] || (row1[1] - row[1]) / (c2 + 1))\n    };\n};","// See __prologue__.js\n\treturn exports;\n}\n"]}